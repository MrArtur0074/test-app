{"version":3,"sources":["img/me.jpg","img/myVK.png","img/edit.svg","img/delete.svg","img/plus.svg","img/jquery-icon.svg","img/git_icon.svg","img/js.webp","img/php.svg","img/mysql.svg","img/css.svg","img/react.svg","components/Header.tsx","components/AppBody.tsx","components/Skill.tsx","components/AppBodySkills.tsx","components/WorkCard.tsx","components/AddWorkCard.tsx","logic/skillData.tsx","logic/api.tsx","components/ModalCreate.tsx","components/ModalEdit.tsx","components/AppBodyWork.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","props","className","this","onClick","React","Component","AppBody","src","imgMe","href","imgVk","Skill","name","title","AppBodySkills","componentsRender","skills","map","i","key","id","WorkCard","dataToModal","bind","delete","startDate","endDate","imgEdit","imgDelete","AddWorkCard","plus","states","svgImageJquery","svgImageGit","svgImageJs","svgImagePhp","svgImageMySql","svgImageCss","svgImageReact","validate","content","errors","pickerData","data","formateDateString","dateString","sym","arr","split","checkError","errorsForm","error","a","fetch","method","headers","body","JSON","stringify","alert","initStateModalInfo","initStateModalErrors","ModalCreate","state","infoCard","handleChangeName","handleChangeTitle","handleChangeStartDate","handleChangeEndDate","createCard","updateComponent","closeModal","console","log","setState","classModal","htmlFor","onChange","type","value","event","target","work","addCard","func","response","json","undefined","Modal","saveCard","prevProps","changeCard","AppBodyWork","isModalTrue","isModalEdit","isModalCreateTrue","isModalCreate","isModalCreateFalse","isModalFalse","setDataModal","index","requiredItem","data_work","setModalDetails","addItem","deleteItem","works","length","modalData","item","data_works","push","splice","App","changeToSkills","changeToMain","changeToWork","bodyApp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6c04ca54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.e9bf138c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/myVK.7fff4fb4.png\";","module.exports = __webpack_public_path__ + \"static/media/edit.eea18703.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.0d10f8f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.1e71bac7.svg\";","module.exports = __webpack_public_path__ + \"static/media/jquery-icon.0fb1be87.svg\";","module.exports = __webpack_public_path__ + \"static/media/git_icon.1acf1264.svg\";","module.exports = __webpack_public_path__ + \"static/media/js.7081eedd.webp\";","module.exports = __webpack_public_path__ + \"static/media/php.d956cbbb.svg\";","module.exports = __webpack_public_path__ + \"static/media/mysql.f80a91ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/css.53075fd9.svg\";","module.exports = __webpack_public_path__ + \"static/media/react.ee7cd8ed.svg\";","import React from 'react';\r\nimport './Header.css'\r\n\r\ninterface HeaderProps {\r\n    0(): void;\r\n    1(): void;\r\n    2(): void;\r\n    3: string;\r\n};\r\n\r\nclass Header extends React.Component<{}>{\r\n    public props: HeaderProps = this.props;\r\n\r\n    render() {\r\n        return (\r\n            <div className='header-app'>\r\n                <ul className='header-ul unselectable'>\r\n                    <li className={this.props[3]==='main'?'active':''} onClick = {this.props[0]}> О себе  </li>\r\n                    <li className={this.props[3]==='skills'?'active':''} onClick = {this.props[1]}> Навыки  </li>\r\n                    <li className={this.props[3]==='work'?'active':''} onClick = {this.props[2]}> Место работы (Учебы)  </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport imgMe from '../img/me.jpg';\r\nimport './AppBody.css';\r\nimport imgVk from '../img/myVK.png'\r\n\r\nclass AppBody extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <div className='photo'> \r\n                    <div>\r\n                        <img className='foto-size' src={imgMe} /> \r\n                    </div>\r\n                </div>\r\n                <div className='profile'>\r\n                    <h1> Давлетшин Артур Данилович</h1>\r\n                    <div className='info phone'> Телефон: +7 996 105 99 76 </div>\r\n                    <div className='info email'> E-mail: smiteartur01@mail.ru </div>\r\n                    <div> <a href='https://vk.com/mrartur0074'> <img className='vk' src={imgVk}/> </a> </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppBody","import React from 'react';\r\nimport './AppBody.css';\r\nimport {Iskill} from '../logic/skillData'\r\n\r\nclass Skill extends React.Component {\r\n    public props: Iskill = this.props;\r\n    render() {\r\n        return (\r\n            <div className='card'>\r\n                <div className='card-img'>\r\n                    <img src={this.props.src} />\r\n                </div>\r\n                <div className='form-attr'> <span className='text-card'> {this.props.name} </span></div>\r\n                <div className='form-attr'> <span className='text-card'> {this.props.title} </span></div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Skill","import React from 'react';\r\nimport './AppBody.css';\r\nimport Skill from './Skill';\r\nimport {Istates} from '../logic/skillData'\r\n\r\nexport interface IstatesProps {\r\n    0: Istates;\r\n}\r\n\r\nclass AppBodySkills extends React.Component<{}> {\r\n    public props: IstatesProps = this.props;\r\n    render() {\r\n        let componentsRender = this.props[0].skills.map((Component, i) => (\r\n            <Skill key={Component.id} {...Component}/>\r\n        ));\r\n        return (\r\n            <div>\r\n                <div className='skills-h'> Мои навыки и знания:</div>\r\n                {componentsRender}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppBodySkills","import React from 'react';\r\nimport {Iwork} from '../logic/skillData';\r\nimport imgEdit from '../img/edit.svg';\r\nimport imgDelete from '../img/delete.svg';\r\n\r\ninterface IWorkCardProps {\r\n    0: Iwork;\r\n    1(number:number): void;\r\n    2: number; //index card\r\n    3(): void; //show modal\r\n    4(number:number): void; //delete card\r\n}\r\n\r\nclass WorkCard extends React.Component<IWorkCardProps> {\r\n    public props: IWorkCardProps = this.props;\r\n    constructor(props:IWorkCardProps) {\r\n        super(props);\r\n        this.dataToModal = this.dataToModal.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='work-card'>\r\n                    <div className='work-card-body'>\r\n                        <div className='work-card-name'> {this.props[0].name} </div>\r\n                        <div className='work-card-title'> {this.props[0].title} </div>\r\n                        <div className='work-card-date'> <span>С {this.props[0].startDate} по {this.props[0].endDate}</span> </div>\r\n                    </div>\r\n                    <div className='work-card-icons'> \r\n                        <img className='card-icon' src={imgEdit} onClick={this.dataToModal}/>\r\n                        <img className='card-icon' src={imgDelete} onClick={this.delete}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private dataToModal():void {\r\n        this.props[1](this.props[2]);\r\n        this.props[3]();\r\n    }\r\n\r\n    private delete():void {\r\n        this.props[4](this.props[2]);\r\n    }\r\n}\r\n\r\nexport default WorkCard","import React from 'react';\r\nimport plus from '../img/plus.svg';\r\n\r\ninterface IAddWorkCard {\r\n    0(): void;\r\n    1(): void;\r\n}\r\n\r\nclass AddWorkCard extends React.Component<{}>{\r\n    public props: IAddWorkCard = this.props;\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='work-card-add work-card' onClick={this.props[0]}>\r\n                    <img src={plus} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddWorkCard","import svgImageJquery from '../img/jquery-icon.svg';\r\nimport svgImageGit from '../img/git_icon.svg';\r\nimport svgImageJs from '../img/js.webp';\r\nimport svgImagePhp from '../img/php.svg';\r\nimport svgImageMySql from '../img/mysql.svg';\r\nimport svgImageCss from '../img/css.svg';\r\nimport svgImageReact from '../img/react.svg';\r\nimport {IInfoCard} from '../components/ModalEdit';\r\n\r\nexport interface Istates {\r\n    skills: Iskill[];\r\n}\r\n\r\nexport interface Iskill {\r\n    id: number | string;\r\n    src: string;\r\n    name: string;\r\n    title?: string;\r\n}\r\n\r\nexport interface Iwork {\r\n    id:number | string;\r\n    name: string;\r\n    title: string;\r\n    startDate: string;\r\n    endDate: string;\r\n}\r\n\r\nexport let states: Istates = {\r\n    skills : [\r\n        {\r\n            id: 1,\r\n            src: svgImageJquery,\r\n            name: \"Jquery\",\r\n            title: \"\"\r\n        },\r\n        {\r\n            id: 2,\r\n            src: svgImageGit,\r\n            name: \"Git\",\r\n            title: \"\"\r\n        },\r\n        {\r\n            id: 3,\r\n            src: svgImageJs,\r\n            name: \"JavaScript\",\r\n            title: \"\"\r\n        },\r\n        {\r\n            id: 4,\r\n            src: svgImagePhp,\r\n            name: \"Php\",\r\n            title: \"\"\r\n        },\r\n        {\r\n            id: 5,\r\n            src: svgImageMySql,\r\n            name: \"MySql\",\r\n            title: \"\"\r\n        },\r\n        {\r\n            id: 6,\r\n            src: svgImageCss,\r\n            name: \"Css\",\r\n            title: \"\"\r\n        },\r\n        {\r\n            id: 7,\r\n            src: svgImageReact,\r\n            name: \"React\",\r\n            title: \"\"\r\n        }\r\n    ]\r\n}\r\n\r\nexport interface inputErrors {\r\n    name: boolean;\r\n    title: boolean;\r\n    startDate: boolean;\r\n    endDate: boolean;\r\n}\r\n\r\nexport function validate(content:IInfoCard):inputErrors {\r\n    let errors:inputErrors = {\r\n        name: false,\r\n        title: false,\r\n        startDate: false,\r\n        endDate: false\r\n    }\r\n\r\n    // Валидация полей\r\n    errors.name = (!content.name)? true: false;\r\n    errors.title = (!content.title)? true: false;\r\n    errors.startDate = (!content.startDate)? true: false;\r\n    errors.endDate = (!content.endDate)? true: false;\r\n\r\n    return errors;\r\n}\r\n\r\n// Дата в строку\r\nexport function pickerData(data:IInfoCard):IInfoCard {\r\n    let finishData:IInfoCard = {\r\n        id: data.id,\r\n        title: data.title,\r\n        name: data.name,\r\n        startDate: formateDateString(data.startDate, '-'),\r\n        endDate: formateDateString(data.endDate, '-')\r\n    };\r\n    return finishData;\r\n}\r\n\r\n// Конвертор\r\nexport function formateDateString(dateString:string, sym:string):string {\r\n    if (!dateString) return '';\r\n    let finishDate:string = \"\";\r\n    let arr = dateString.split(sym);\r\n    finishDate = (sym === '.')? arr[2] + '-' + arr[1] + '-' + arr[0]: arr[2] + '.' + arr[1] + '.' + arr[0];\r\n    return finishDate;\r\n}\r\n\r\nexport function checkError(errorsForm:inputErrors):boolean {\r\n    let error:boolean = false;\r\n    let key:keyof typeof errorsForm;\r\n    for (key in errorsForm) {\r\n        if (errorsForm[key]) error=true;\r\n    }\r\n    return error;\r\n}","import {IInfoCard} from '../components/ModalEdit'\r\n\r\nexport async function changeCard(data:IInfoCard) {\r\n    try {\r\n        await fetch('http://localhost:4000/works/' + data.id, {\r\n            method: \"put\",\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                id: data.id,\r\n                name: data.name,\r\n                title: data.title,\r\n                startDate: data.startDate,\r\n                endDate: data.endDate\r\n            })\r\n        })\r\n    } catch (error) {\r\n        alert('Возникла ошибка при изменении документа');\r\n    }\r\n    \r\n}","import React, {Component} from 'react';\r\nimport './Modal.css';\r\nimport {inputErrors, validate, pickerData, checkError} from '../logic/skillData';\r\nimport {IInfoCard} from './ModalEdit';\r\n\r\ninterface IModal {\r\n    0: boolean; // open\r\n    1(): void; //close\r\n    2(IInfoCard:IInfoCard):void //create card\r\n}\r\n\r\ninterface IModalState {\r\n    infoCard: IInfoCard;\r\n    errors: inputErrors;\r\n}\r\n\r\nexport const initStateModalInfo:IInfoCard = {\r\n    id: '',\r\n    name: '',\r\n    title: '',\r\n    startDate: '',\r\n    endDate: ''\r\n}\r\n\r\nexport const initStateModalErrors:inputErrors = {\r\n    name: false,\r\n    title: false,\r\n    startDate: false,\r\n    endDate: false\r\n}\r\n\r\nclass ModalCreate extends Component<IModal, IModalState> {\r\n    constructor(props:IModal) {\r\n        super(props);\r\n        this.state = {\r\n            infoCard: initStateModalInfo,\r\n            errors: initStateModalErrors\r\n        };\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangeTitle = this.handleChangeTitle.bind(this);\r\n        this.handleChangeStartDate = this.handleChangeStartDate.bind(this);\r\n        this.handleChangeEndDate = this.handleChangeEndDate.bind(this);\r\n        this.createCard = this.createCard.bind(this);\r\n        this.updateComponent = this.updateComponent.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    public props: IModal = this.props;\r\n\r\n    private closeModal():void {\r\n        console.log(initStateModalErrors);\r\n        this.setState({\r\n            infoCard: initStateModalInfo,\r\n            errors: initStateModalErrors\r\n        });\r\n        this.props[1]();\r\n    }\r\n\r\n    render() {\r\n        let classModal = (this.props[0])? 'modalDialog target': 'modalDialog';\r\n\r\n        return (\r\n            <div id=\"openModal\" className={classModal}>\r\n                <div>\r\n                    <a onClick={this.closeModal} title=\"Закрыть\" className=\"close\">X</a>\r\n                    <h2>Создать новое место работы</h2>\r\n                    <form className='card-work'>\r\n                        <label htmlFor='inputName'><span>*</span>Название места:</label>\r\n                        <div>\r\n                            <input \r\n                            className={this.state.errors.name ? \"error-modal\" : \"\"} \r\n                            onChange={this.handleChangeName} \r\n                            name='inputName' \r\n                            type='text'\r\n                            value={this.state.infoCard.name}\r\n                            />\r\n                            <label \r\n                            className={this.state.errors.name ? \"error-show\" : \"error-hide\"} > \r\n                                Данное поле не должно быть пустым! \r\n                            </label>\r\n                        </div>\r\n\r\n                        <label htmlFor='inputTitle'><span>*</span>Описание:</label>\r\n                        <div>\r\n                            <textarea \r\n                            className={this.state.errors.title ? \"error-modal\" : \"\"}\r\n                            onChange={this.handleChangeTitle} \r\n                            value={this.state.infoCard.title}\r\n                            name='inputTitle'>\r\n                            </textarea>\r\n                            <label \r\n                            className={this.state.errors.title ? \"error-show\" : \"error-hide\"}> \r\n                                Данное поле не должно быть пустым! \r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className='div-date'>\r\n                            <label htmlFor='inputStartDate'><span>*</span>Дата начала: </label>\r\n                            <input \r\n                            className={this.state.errors.startDate ? \"error-modal\" : \"\"} \r\n                            onChange={this.handleChangeStartDate} \r\n                            name='inputStartDate' \r\n                            type='date'\r\n                            value={this.state.infoCard.startDate}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className='div-date'>\r\n                            <label htmlFor='inputEndDate'><span>*</span>Дата окончания: </label>\r\n                            <input \r\n                            className={this.state.errors.endDate ? \"error-modal\" : \"\"}\r\n                            onChange={this.handleChangeEndDate} \r\n                            name='inputEndDate' \r\n                            type='date'\r\n                            value={this.state.infoCard.endDate}\r\n                            />\r\n                        </div>\r\n                        <label \r\n                        className={(this.state.errors.startDate || this.state.errors.endDate) ? \"error-show\" : \"error-hide\"}> \r\n                            Данные поля не должны быть пустыми! \r\n                        </label>\r\n                        <div>\r\n                            <input \r\n                            className='modalButton'\r\n                            name='work-send' \r\n                            type='button' \r\n                            value=\"Сохранить\"\r\n                            onClick={this.createCard}\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private handleChangeName(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: event.target.value,\r\n                title: this.state.infoCard.title,\r\n                startDate: this.state.infoCard.startDate,\r\n                endDate: this.state.infoCard.endDate\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleChangeTitle(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: this.state.infoCard.name,\r\n                title: event.target.value,\r\n                startDate: this.state.infoCard.startDate,\r\n                endDate: this.state.infoCard.endDate\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleChangeStartDate(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: this.state.infoCard.name,\r\n                title: this.state.infoCard.title,\r\n                startDate: event.target.value,\r\n                endDate: this.state.infoCard.endDate\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleChangeEndDate(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: this.state.infoCard.name,\r\n                title: this.state.infoCard.title,\r\n                startDate: this.state.infoCard.startDate,\r\n                endDate: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    private createCard() {\r\n        const work:IInfoCard = pickerData(this.state.infoCard);\r\n        let errorsForm:inputErrors = validate(work);\r\n        this.setState({\r\n            errors: errorsForm\r\n        });\r\n        if (!checkError(errorsForm)) {\r\n            this.addCard(work);\r\n            this.setState({infoCard: initStateModalInfo});\r\n            this.closeModal();\r\n        }\r\n    }\r\n\r\n    private async addCard(data:IInfoCard, func:void) {\r\n        try {\r\n            const response = await fetch('http://localhost:4000/works/', {\r\n                method: \"post\",\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    id: data.id,\r\n                    name: data.name,\r\n                    title: data.title,\r\n                    startDate: data.startDate,\r\n                    endDate: data.endDate\r\n                })\r\n            })\r\n            let json = await response.json();\r\n            this.updateComponent({\r\n                id: json.id,\r\n                title: json.title,\r\n                name: json.name,\r\n                startDate: json.startDate,\r\n                endDate: json.endDate\r\n            });\r\n        } catch (error) {\r\n            alert('Произошла ошибка при добавлении.');\r\n        }\r\n    }\r\n\r\n    private updateComponent(data:IInfoCard):void {\r\n        if (data !== undefined) this.props[2](data);\r\n    }\r\n}\r\n\r\nexport default ModalCreate","import React, {Component} from 'react';\r\nimport './Modal.css';\r\nimport {inputErrors, validate, formateDateString, pickerData, checkError} from '../logic/skillData';\r\nimport {changeCard} from '../logic/api';\r\nimport {initStateModalInfo, initStateModalErrors} from './ModalCreate';\r\n\r\ninterface IModal {\r\n    0: boolean;\r\n    1(): void; //close\r\n    2: IInfoCard;\r\n    3(IInfoCard:IInfoCard): void; //set data to modal\r\n}\r\n\r\nexport interface IInfoCard {\r\n    id: string | number;\r\n    name: string;\r\n    title: string;\r\n    startDate: string;\r\n    endDate: string;\r\n}\r\n\r\nexport interface IModalState {\r\n    infoCard: IInfoCard,\r\n    errors: inputErrors\r\n}\r\n\r\nclass Modal extends Component<IModal, IModalState> {\r\n    constructor(props:IModal) {\r\n        super(props);\r\n        this.state = {\r\n            infoCard: initStateModalInfo,\r\n            errors: initStateModalErrors\r\n        };\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangeTitle = this.handleChangeTitle.bind(this);\r\n        this.handleChangeStartDate = this.handleChangeStartDate.bind(this);\r\n        this.handleChangeEndDate = this.handleChangeEndDate.bind(this);\r\n        this.saveCard = this.saveCard.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n\r\n    public props: IModal = this.props;\r\n\r\n    private closeModal():void {\r\n        console.log(initStateModalErrors);\r\n        this.setState({\r\n            infoCard: initStateModalInfo,\r\n            errors: initStateModalErrors\r\n        });\r\n        this.props[1]();\r\n    }\r\n\r\n    componentDidUpdate(prevProps:IModal) {\r\n        if (prevProps !== this.props)\r\n            this.setState({\r\n                infoCard: {\r\n                    id: this.props[2].id,\r\n                    name: this.props[2].name,\r\n                    title: this.props[2].title,\r\n                    startDate: formateDateString(this.props[2].startDate, '.'),\r\n                    endDate: formateDateString(this.props[2].endDate, '.')\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let classModal = (this.props[0])? 'modalDialog target': 'modalDialog';\r\n        return (\r\n            <div id=\"openModal\" className={classModal}>\r\n                <div>\r\n                    <a onClick={this.closeModal} title=\"Закрыть\" className=\"close\">X</a>\r\n                    <h2>Редактировать</h2>\r\n                    <form className='card-work'>\r\n                        <label htmlFor='inputName'><span>*</span>Название места:</label>\r\n                            <div>\r\n                                <input \r\n                                    className={this.state.errors.name ? \"error-modal\" : \"\"} \r\n                                    value={this.state.infoCard.name} \r\n                                    onChange={this.handleChangeName} \r\n                                    name='inputName' \r\n                                    type='text'\r\n                                />\r\n                                <label \r\n                                className={this.state.errors.name ? \"error-show\" : \"error-hide\"} > \r\n                                    Данное поле не должно быть пустым! \r\n                                </label>\r\n                            </div>\r\n\r\n                        <label htmlFor='inputTitle'><span>*</span>Описание:</label>\r\n                        <div>\r\n                            <textarea \r\n                                className={this.state.errors.title ? \"error-modal\" : \"\"} \r\n                                onChange={this.handleChangeTitle} \r\n                                value={this.state.infoCard.title} \r\n                                name='inputTitle'>\r\n                            </textarea>\r\n                            <label \r\n                            className={this.state.errors.title ? \"error-show\" : \"error-hide\"}> \r\n                                Данное поле не должно быть пустым! \r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className='div-date'>\r\n                            <label htmlFor='inputStartDate'><span>*</span>Дата начала: </label>\r\n                            <input \r\n                                className={this.state.errors.startDate ? \"error-modal\" : \"\"} \r\n                                value={this.state.infoCard.startDate} \r\n                                onChange={this.handleChangeStartDate} \r\n                                name='inputStartDate' \r\n                                type='date'\r\n                            />\r\n                        </div>\r\n                        <div className='div-date'>\r\n                            <label htmlFor='inputEndDate'><span>*</span>Дата окончания: </label>\r\n                            <input \r\n                                className={this.state.errors.endDate ? \"error-modal\" : \"\"} \r\n                                value={this.state.infoCard.endDate}\r\n                                onChange={this.handleChangeEndDate} \r\n                                name='inputEndDate' \r\n                                type='date'\r\n                            />\r\n                        </div>\r\n                        <label \r\n                        className={(this.state.errors.startDate || this.state.errors.endDate) ? \"error-show\" : \"error-hide\"}> \r\n                            Данные поля не должны быть пустыми! \r\n                        </label>\r\n                        <div className='div-button'>\r\n                            <input \r\n                                className='modalButton'\r\n                                onClick={this.saveCard} \r\n                                name='work-send' \r\n                                type='button' \r\n                                value=\"Сохранить\"\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private handleChangeName(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: event.target.value,\r\n                title: this.state.infoCard.title,\r\n                startDate: this.state.infoCard.startDate,\r\n                endDate: this.state.infoCard.endDate\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleChangeTitle(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: this.state.infoCard.name,\r\n                title: event.target.value,\r\n                startDate: this.state.infoCard.startDate,\r\n                endDate: this.state.infoCard.endDate\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleChangeStartDate(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: this.state.infoCard.name,\r\n                title: this.state.infoCard.title,\r\n                startDate: event.target.value,\r\n                endDate: this.state.infoCard.endDate\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleChangeEndDate(event:any) {\r\n        this.setState({\r\n            infoCard: {\r\n                id: this.state.infoCard.id,\r\n                name: this.state.infoCard.name,\r\n                title: this.state.infoCard.title,\r\n                startDate: this.state.infoCard.startDate,\r\n                endDate: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveCard() {\r\n        const work:IInfoCard = pickerData(this.state.infoCard);\r\n        let errorsForm:inputErrors = validate(work);\r\n        this.setState({\r\n            errors: errorsForm\r\n        });\r\n        if (!checkError(errorsForm)) {\r\n            changeCard(work);\r\n            this.props[3](work);\r\n            this.closeModal();\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Modal","import React from 'react';\r\nimport './AppBody.css';\r\nimport {IstatesProps} from './AppBodySkills';\r\nimport WorkCard from './WorkCard';\r\nimport AddWorkCard from './AddWorkCard';\r\nimport Modal from './ModalEdit';\r\nimport {IInfoCard} from './ModalEdit';\r\nimport ModalCreate from './ModalCreate';\r\n\r\nexport interface IAppBodyWork {\r\n    isModalEdit: boolean;\r\n    isModalCreate: boolean;\r\n    data_work: Array<IInfoCard>;\r\n    requiredItem: number;\r\n}\r\n\r\n\r\ninterface IAppBodyWorkProps {}\r\n\r\nclass AppBodyWork extends React.Component<IAppBodyWorkProps, IAppBodyWork> {\r\n    constructor(props:IAppBodyWorkProps) {\r\n        super(props);\r\n        this.state = {\r\n            isModalEdit: false, \r\n            isModalCreate: false,\r\n            data_work:[], \r\n            requiredItem: 0\r\n        }\r\n        this.isModalTrue = this.isModalTrue.bind(this);\r\n        this.isModalFalse = this.isModalFalse.bind(this);\r\n        this.setDataModal = this.setDataModal.bind(this);\r\n        this.setModalDetails = this.setModalDetails.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const response = await fetch('http://localhost:4000/db')\r\n            const json = await response.json();\r\n            this.setState({\r\n                data_work: json.works\r\n            })\r\n        } catch (error) {\r\n            alert('Ошибка при выгрузке Json данных.');\r\n        }\r\n    }\r\n\r\n    public props: IstatesProps = this.props;\r\n    render() {\r\n        if (!this.state.data_work.length) return null;\r\n        let componentsRender = this.state.data_work.map((Component, index) => (\r\n            <WorkCard key={index} {...[Component, this.setDataModal, index, this.isModalTrue, this.deleteItem]}/>\r\n        ));\r\n\r\n        const requiredItem:number = this.state.requiredItem;\r\n        let modalData = this.state.data_work[requiredItem];\r\n\r\n        return (\r\n            <div>\r\n                {componentsRender}\r\n                <AddWorkCard {...[this.isModalCreateTrue, this.isModalCreateFalse]}/>\r\n                <Modal {...[this.state.isModalEdit, this.isModalFalse, modalData, this.setModalDetails]}/>\r\n                <ModalCreate {...[this.state.isModalCreate, this.isModalCreateFalse, this.addItem]}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private isModalTrue = (): void => {\r\n        this.setState({ isModalEdit: true })\r\n    }\r\n\r\n    private isModalCreateTrue = (): void => {\r\n        this.setState({ isModalCreate: true })\r\n    }\r\n\r\n    private isModalCreateFalse = (): void => {\r\n        this.setState({ isModalCreate: false })\r\n    }\r\n\r\n    private isModalFalse = (): void => {\r\n        this.setState({ isModalEdit: false })\r\n    }\r\n\r\n    private setDataModal = (index:number): void => {\r\n        this.setState({ \r\n            requiredItem: index\r\n        })\r\n    }\r\n\r\n    private setModalDetails(item:IInfoCard) {\r\n        const requiredItem:number = this.state.requiredItem;\r\n        let data_works:Array<IInfoCard> = this.state.data_work;\r\n        data_works[requiredItem] = item;\r\n        this.setState({data_work: data_works});\r\n    }\r\n\r\n    private addItem(item:IInfoCard) {\r\n        let data_works:Array<IInfoCard> = this.state.data_work;\r\n        data_works.push(item);\r\n        this.setState({data_work: data_works});\r\n    }\r\n\r\n    private deleteItem(index:number):void {\r\n        this.setState({ \r\n            requiredItem: index\r\n        }, async () => {\r\n            const requiredItem:number = this.state.requiredItem;\r\n            let data_works:Array<IInfoCard> = this.state.data_work;\r\n\r\n            try {\r\n                const response = await fetch('http://localhost:4000/works/' + (data_works[requiredItem].id), {\r\n                    method: 'delete'\r\n                })\r\n                let json = await response.json();\r\n                data_works.splice(requiredItem, 1);  \r\n                this.setState({data_work: data_works, requiredItem: 0});\r\n            } catch (error) {\r\n                alert('Произошла ошибка при удалении.')\r\n            }\r\n        })  \r\n    }\r\n}\r\n\r\nexport default AppBodyWork","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header'\r\nimport AppBody from './components/AppBody'\r\nimport AppBodySkills from './components/AppBodySkills'\r\nimport AppBodyWork from './components/AppBodyWork'\r\nimport {states} from './logic/skillData'\r\n\r\nexport interface AppComponentState {\r\n  name: string;\r\n}\r\n\r\nclass App extends React.Component<{}, AppComponentState> {\r\n  constructor(props:any) {\r\n    super(props);\r\n    this.state = {name: 'main'}\r\n    this.changeToSkills = this.changeToSkills.bind(this);\r\n    this.changeToMain = this.changeToMain.bind(this);\r\n    this.changeToWork = this.changeToWork.bind(this);\r\n  }\r\n\r\n  render() {\r\n      let bodyApp; \r\n      switch(this.state.name) {\r\n        case 'main':\r\n          bodyApp = <AppBody />;\r\n        break;\r\n        case 'skills':\r\n          bodyApp = <AppBodySkills {...[states]}/>;\r\n        break;\r\n        case 'work':\r\n          bodyApp = <AppBodyWork {...[states]}/>;\r\n        break;\r\n      }\r\n      return (\r\n        <div className=\"App-body\">\r\n        <Header {...[this.changeToMain, this.changeToSkills, this.changeToWork, this.state.name]}/>\r\n        {bodyApp}\r\n      </div>\r\n      )\r\n  }\r\n  // Переключение между вкладками\r\n  private changeToSkills = (): void => {\r\n    this.setState({ name: 'skills' })\r\n  }\r\n\r\n  private changeToMain = (): void => {\r\n    this.setState({ name: 'main' })\r\n  }\r\n\r\n  private changeToWork = (): void => {\r\n    this.setState({ name: 'work' })\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}